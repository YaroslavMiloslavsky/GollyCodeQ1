@RULE CrossSymmetry

@TABLE
n_states:6
neighborhood:vonNeumann
symmetries:rotate4

var all_states = {1,2,3,4}
var all_states_include_zero = {0,1,2,3,4}
var all_states_include_destroy = {1,2,3,4,5}

# Construction
all_states_include_destroy, 0,0,0,0, 0 # If alone - die
1, 1,1,1,1, 2 # If centre -> centre state
1, 1,1,0,0, 5 
1, 1,1,1,0, 5

# Sonar
# The sonar will begin in the centre, that is, if the current cell has 4 neighbouring cells, and signal each cell to find the end of the border of the cross
# After that, the cells will 'race' to the the ends, and due to the synchronisation of the whole process, each signal moves 1 cell each turn
# Due to the fact above, if we have a short or a long 'arm' the center will not get 4 returning signals and will be terminated
# This state continues to expand until it reaches dead end in a cross
1, 0,0,2,0, 3
1, 0,2,0,1, 3
1, 0,3,0,1, 3
1, 0,3,0,0, 3
# For each "arm" of the cross, ass soon as we found the dead end aka the border of the cross, we signal back 
3, 0,0,2,0, 4
3, 0,3,0,0, 4
3, 0,3,0,4, 4
3, 0,2,0,4, 4
# Here if not all signals returned at the same time, the centre will be marked to be destroyed and if a neighbour cell is marked, current cell is getting marked as well
2, 4,3,3,3, 5
2, 4,4,3,3, 5
2, 4,4,4,3, 5
2, 4,1,1,1, 5
2, 4,4,1,1, 5
2, 4,4,4,1, 5
# Finally for the sonar to continue indefinitely, we will return the states to the beginning so the sonar will keep on looping 
2, 4,4,4,4, 1
4, 4,0,1,0, 1
4, 4,0,0,0, 1
4, 0,1,0,1, 1
4, 0,0,1,0, 1

# I have come to destroy
all_states, 0,5,0,all_states_include_destroy, 5
all_states, 0,5,0,0, 5
5, 0,0,all_states_include_destroy,0, 0

@COLORS
#0 255 255 255 # Default
1 255 0 0 # Initial State
2 0 255 0 # Centre State
3 0 0 255 # Seek State
4 255 255 1 # Return State
5 255 255 255 # Mark To Destroy
